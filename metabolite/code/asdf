=========
 IPython
=========

Tools for Interactive Computing in Python
=========================================

    A Python shell with automatic history (input and output), dynamic object
    introspection, easier configuration, command completion, access to the
    system shell and more.  IPython can also be embedded in running programs.

Usage

    ipython [subcommand] [options] [-c cmd | -m mod | file] [--] [arg] ...

    If invoked with no options, it executes the file and exits, passing the
    remaining arguments to the script, just as if you had specified the same
    command with python. You may need to specify `--` before args to be passed
    to the script, to prevent IPython from attempting to parse them. If you
    specify the option `-i` before the filename, it will enter an interactive
    IPython session after running the script, rather than exiting. Files ending
    in .py will be treated as normal Python, but files ending in .ipy can
    contain special IPython syntax (magic commands, shell expansions, etc.).

    Almost all configuration in IPython is available via the command-line. Do
    `ipython --help-all` to see all available options.  For persistent
    configuration, look into your `ipython_config.py` configuration file for
    details.

    This file is typically installed in the `IPYTHONDIR` directory, and there
    is a separate configuration directory for each profile. The default profile
    directory will be located in $IPYTHONDIR/profile_default. IPYTHONDIR
    defaults to to `$HOME/.ipython`.  For Windows users, $HOME resolves to
    C:\Users\YourUserName in most instances.

    To initialize a profile with the default configuration file, do::

      $> ipython profile create

    and start editing `IPYTHONDIR/profile_default/ipython_config.py`

    In IPython's documentation, we will refer to this directory as
    `IPYTHONDIR`, you can change its default location by creating an
    environment variable with this name and setting it to the desired path.

    For more information, see the manual available in HTML and PDF in your
    installation, or online at https://ipython.org/documentation.html.

Subcommands
===========
Subcommands are launched as `ipython cmd [args]`. For information on using
subcommand 'cmd', do: `ipython cmd -h`.

profile
    Create and manage IPython profiles.
kernel
    Start a kernel without an attached frontend.
locate
    print the path to the IPython dir
history
    Manage the IPython history database.

Options
=======
The options below are convenience aliases to configurable class-options,
as listed in the "Equivalent to" description-line of the aliases.
To see all configurable class-options for some <cmd>, use:
    <cmd> --help-all

--debug
    set log level to logging.DEBUG (maximize logging output)
    Equivalent to: [--Application.log_level=10]
--show-config
    Show the application's configuration (human-readable format)
    Equivalent to: [--Application.show_config=True]
--show-config-json
    Show the application's configuration (json format)
    Equivalent to: [--Application.show_config_json=True]
--quiet
    set log level to logging.CRITICAL (minimize logging output)
    Equivalent to: [--Application.log_level=50]
--init
    Initialize profile with default config files.  This is equivalent
                to running `ipython profile create <profile>` prior to startup.
    Equivalent to: [--BaseIPythonApplication.copy_config_files=True --BaseIPythonApplication.auto_create=True]
--autoindent
    Turn on autoindenting.
    Equivalent to: [--InteractiveShell.autoindent=True]
--no-autoindent
    Turn off autoindenting.
    Equivalent to: [--InteractiveShell.autoindent=False]
--automagic
    Turn on the auto calling of magic commands. Type %%magic at the
            IPython  prompt  for  more information.
    Equivalent to: [--InteractiveShell.automagic=True]
--no-automagic
    Turn off the auto calling of magic commands.
    Equivalent to: [--InteractiveShell.automagic=False]
--pdb
    Enable auto calling the pdb debugger after every exception.
    Equivalent to: [--InteractiveShell.pdb=True]
--no-pdb
    Disable auto calling the pdb debugger after every exception.
    Equivalent to: [--InteractiveShell.pdb=False]
--pprint
    Enable auto pretty printing of results.
    Equivalent to: [--PlainTextFormatter.pprint=True]
--no-pprint
    Disable auto pretty printing of results.
    Equivalent to: [--PlainTextFormatter.pprint=False]
--color-info
    IPython can display information about objects via a set of functions,
        and optionally can use colors for this, syntax highlighting
        source code and various other elements. This is on by default, but can cause
        problems with some pagers. If you see such problems, you can disable the
        colours.
    Equivalent to: [--InteractiveShell.color_info=True]
--no-color-info
    Disable using colors for info related things.
    Equivalent to: [--InteractiveShell.color_info=False]
--ignore-cwd
    Exclude the current working directory from sys.path
    Equivalent to: [--InteractiveShellApp.ignore_cwd=True]
--no-ignore-cwd
    Include the current working directory in sys.path
    Equivalent to: [--InteractiveShellApp.ignore_cwd=False]
--nosep
    Eliminate all spacing between prompts.
    Equivalent to: [--InteractiveShell.separate_in= --InteractiveShell.separate_out= --InteractiveShell.separate_out2=]
--pylab
    Pre-load matplotlib and numpy for interactive use with
        the default matplotlib backend.
    Equivalent to: [--InteractiveShellApp.pylab=auto]
--matplotlib
    Configure matplotlib for interactive use with
        the default matplotlib backend.
    Equivalent to: [--InteractiveShellApp.matplotlib=auto]
--autoedit-syntax
    Turn on auto editing of files with syntax errors.
    Equivalent to: [--TerminalInteractiveShell.autoedit_syntax=True]
--no-autoedit-syntax
    Turn off auto editing of files with syntax errors.
    Equivalent to: [--TerminalInteractiveShell.autoedit_syntax=False]
--simple-prompt
    Force simple minimal prompt using `raw_input`
    Equivalent to: [--TerminalInteractiveShell.simple_prompt=True]
--no-simple-prompt
    Use a rich interactive prompt with prompt_toolkit
    Equivalent to: [--TerminalInteractiveShell.simple_prompt=False]
--banner
    Display a banner upon starting IPython.
    Equivalent to: [--TerminalIPythonApp.display_banner=True]
--no-banner
    Don't display a banner upon starting IPython.
    Equivalent to: [--TerminalIPythonApp.display_banner=False]
--confirm-exit
    Set to confirm when you try to exit IPython with an EOF (Control-D
        in Unix, Control-Z/Enter in Windows). By typing 'exit' or 'quit',
        you can force a direct exit without any confirmation.
    Equivalent to: [--TerminalInteractiveShell.confirm_exit=True]
--no-confirm-exit
    Don't prompt the user when exiting.
    Equivalent to: [--TerminalInteractiveShell.confirm_exit=False]
--term-title
    Enable auto setting the terminal title.
    Equivalent to: [--TerminalInteractiveShell.term_title=True]
--no-term-title
    Disable auto setting the terminal title.
    Equivalent to: [--TerminalInteractiveShell.term_title=False]
--classic
    Gives IPython a similar feel to the classic Python prompt.
    Equivalent to: [--InteractiveShell.cache_size=0 --InteractiveShell.separate_in= --InteractiveShell.separate_out= --InteractiveShell.separate_out2= --InteractiveShell.colors=NoColor --InteractiveShell.xmode=Plain --PlainTextFormatter.pprint=False --TerminalInteractiveShell.prompts_class=IPython.terminal.prompts.ClassicPrompts]
--quick
    Enable quick startup with no config files.
    Equivalent to: [--TerminalIPythonApp.quick=True]
-i
    If running code from the command line, become interactive afterwards.
        It is often useful to follow this with `--` to treat remaining flags as
        script arguments.
    Equivalent to: [--TerminalIPythonApp.force_interact=True]
--log-level=<Enum>
    Set the log level by value or name.
    Choices: any of [0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL']
    Default: 30
    Equivalent to: [--Application.log_level]
--profile-dir=<Unicode>
    Set the profile location directly. This overrides the logic used by the
            `profile` option.
    Default: ''
    Equivalent to: [--ProfileDir.location]
--profile=<Unicode>
    The IPython profile to use.
    Default: 'default'
    Equivalent to: [--BaseIPythonApplication.profile]
--ipython-dir=<Unicode>
    The name of the IPython directory. This directory is used for logging
    configuration (through profiles), history storage, etc. The default is
    usually $HOME/.ipython. This option can also be specified through the
    environment variable IPYTHONDIR.
    Default: ''
    Equivalent to: [--BaseIPythonApplication.ipython_dir]
--config=<Unicode>
    Path to an extra config file to load.
        If specified, load this config file in addition to any other IPython
    config.
    Default: ''
    Equivalent to: [--BaseIPythonApplication.extra_config_file]
--autocall=<Enum>
    Make IPython automatically call any callable object even if you didn't type
    explicit parentheses. For example, 'str 43' becomes 'str(43)' automatically.
    The value can be '0' to disable the feature, '1' for 'smart' autocall, where
    it is not applied if there are no more arguments on the line, and '2' for
    'full' autocall, where all callable objects are automatically called (even
    if no arguments are present).
    Choices: any of [0, 1, 2]
    Default: 0
    Equivalent to: [--InteractiveShell.autocall]
--colors=<CaselessStrEnum>
    Set the color scheme (NoColor, Neutral, Linux, or LightBG).
    Choices: any of ['Neutral', 'NoColor', 'LightBG', 'Linux'] (case-insensitive)
    Default: 'Neutral'
    Equivalent to: [--InteractiveShell.colors]
--logfile=<Unicode>
    The name of the logfile to use.
    Default: ''
    Equivalent to: [--InteractiveShell.logfile]
--logappend=<Unicode>
    Start logging to the given file in append mode. Use `logfile` to specify a
    log file to **overwrite** logs to.
    Default: ''
    Equivalent to: [--InteractiveShell.logappend]
-c=<Unicode>
    Execute the given command string.
    Default: ''
    Equivalent to: [--InteractiveShellApp.code_to_run]
-m=<Unicode>
    Run the module as a script.
    Default: ''
    Equivalent to: [--InteractiveShellApp.module_to_run]
--ext=<list-item-1>...
    Dotted module name(s) of one or more IPython extensions to load.
    For specifying extra extensions to load on the command-line.
    .. versionadded:: 7.10
    Default: []
    Equivalent to: [--InteractiveShellApp.extra_extensions]
--gui=<CaselessStrEnum>
    Enable GUI event loop integration with any of ('asyncio', 'glut', 'gtk',
    'gtk2', 'gtk3', 'gtk4', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'qt6', 'tk',
    'wx', 'gtk2', 'qt4').
    Choices: any of ['asyncio', 'glut', 'gtk', 'gtk2', 'gtk3', 'gtk4', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'qt6', 'tk', 'wx', 'gtk2', 'qt4'] (case-insensitive) or None
    Default: None
    Equivalent to: [--InteractiveShellApp.gui]
--pylab=<CaselessStrEnum>
    Pre-load matplotlib and numpy for interactive use,
            selecting a particular matplotlib backend and loop integration.
    Choices: any of ['auto', 'agg', 'gtk', 'gtk3', 'gtk4', 'inline', 'ipympl', 'nbagg', 'notebook', 'osx', 'pdf', 'ps', 'qt', 'qt4', 'qt5', 'qt6', 'svg', 'tk', 'widget', 'wx'] (case-insensitive) or None
    Default: None
    Equivalent to: [--InteractiveShellApp.pylab]
--matplotlib=<CaselessStrEnum>
    Configure matplotlib for interactive use with
            the default matplotlib backend.
    Choices: any of ['auto', 'agg', 'gtk', 'gtk3', 'gtk4', 'inline', 'ipympl', 'nbagg', 'notebook', 'osx', 'pdf', 'ps', 'qt', 'qt4', 'qt5', 'qt6', 'svg', 'tk', 'widget', 'wx'] (case-insensitive) or None
    Default: None
    Equivalent to: [--InteractiveShellApp.matplotlib]
--cache-size=<Int>
    Set the size of the output cache.  The default is 1000, you can change it
    permanently in your config file.  Setting it to 0 completely disables the
    caching system, and the minimum value accepted is 3 (if you provide a value
    less than 3, it is reset to 0 and a warning is issued).  This limit is
    defined because otherwise you'll spend more time re-flushing a too small
    cache than working
    Default: 1000
    Equivalent to: [--InteractiveShell.cache_size]

Class options
=============
The command-line option below sets the respective configurable class-parameter:
    --Class.parameter=value
This line is evaluated in Python, so simple expressions are allowed.
For instance, to set `C.a=[0,1,2]`, you may type this:
    --C.a='range(3)'

InteractiveShellApp(Configurable) options
-----------------------------------------
--InteractiveShellApp.code_to_run=<Unicode>
    Execute the given command string.
    Default: ''
--InteractiveShellApp.exec_PYTHONSTARTUP=<Bool>
    Run the file referenced by the PYTHONSTARTUP environment
            variable at IPython startup.
    Default: True
--InteractiveShellApp.exec_files=<list-item-1>...
    List of files to run at IPython startup.
    Default: []
--InteractiveShellApp.exec_lines=<list-item-1>...
    lines of code to run at IPython startup.
    Default: []
--InteractiveShellApp.extensions=<list-item-1>...
    A list of dotted module names of IPython extensions to load.
    Default: []
--InteractiveShellApp.extra_extensions=<list-item-1>...
    Dotted module name(s) of one or more IPython extensions to load.
    For specifying extra extensions to load on the command-line.
    .. versionadded:: 7.10
    Default: []
--InteractiveShellApp.file_to_run=<Unicode>
    A file to be run
    Default: ''
--InteractiveShellApp.gui=<CaselessStrEnum>
    Enable GUI event loop integration with any of ('asyncio', 'glut', 'gtk',
    'gtk2', 'gtk3', 'gtk4', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'qt6', 'tk',
    'wx', 'gtk2', 'qt4').
    Choices: any of ['asyncio', 'glut', 'gtk', 'gtk2', 'gtk3', 'gtk4', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'qt6', 'tk', 'wx', 'gtk2', 'qt4'] (case-insensitive) or None
    Default: None
--InteractiveShellApp.hide_initial_ns=<Bool>
    Should variables loaded at startup (by startup files, exec_lines, etc.)
            be hidden from tools like %who?
    Default: True
--InteractiveShellApp.ignore_cwd=<Bool>
    If True, IPython will not add the current working directory to sys.path.
            When False, the current working directory is added to sys.path, allowing imports
            of modules defined in the current directory.
    Default: False
--InteractiveShellApp.matplotlib=<CaselessStrEnum>
    Configure matplotlib for interactive use with
            the default matplotlib backend.
    Choices: any of ['auto', 'agg', 'gtk', 'gtk3', 'gtk4', 'inline', 'ipympl', 'nbagg', 'notebook', 'osx', 'pdf', 'ps', 'qt', 'qt4', 'qt5', 'qt6', 'svg', 'tk', 'widget', 'wx'] (case-insensitive) or None
    Default: None
--InteractiveShellApp.module_to_run=<Unicode>
    Run the module as a script.
    Default: ''
--InteractiveShellApp.pylab=<CaselessStrEnum>
    Pre-load matplotlib and numpy for interactive use,
            selecting a particular matplotlib backend and loop integration.
    Choices: any of ['auto', 'agg', 'gtk', 'gtk3', 'gtk4', 'inline', 'ipympl', 'nbagg', 'notebook', 'osx', 'pdf', 'ps', 'qt', 'qt4', 'qt5', 'qt6', 'svg', 'tk', 'widget', 'wx'] (case-insensitive) or None
    Default: None
--InteractiveShellApp.pylab_import_all=<Bool>
    If true, IPython will populate the user namespace with numpy, pylab, etc.
            and an ``import *`` is done from numpy and pylab, when using pylab mode.
            When False, pylab mode should not import any names into the user
    namespace.
    Default: True
--InteractiveShellApp.reraise_ipython_extension_failures=<Bool>
    Reraise exceptions encountered loading IPython extensions?
    Default: False

Application(SingletonConfigurable) options
------------------------------------------
--Application.log_datefmt=<Unicode>
    The date format used by logging formatters for %(asctime)s
    Default: '%Y-%m-%d %H:%M:%S'
--Application.log_format=<Unicode>
    The Logging format template
    Default: '[%(name)s]%(highlevel)s %(message)s'
--Application.log_level=<Enum>
    Set the log level by value or name.
    Choices: any of [0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL']
    Default: 30
--Application.show_config=<Bool>
    Instead of starting the Application, dump configuration to stdout
    Default: False
--Application.show_config_json=<Bool>
    Instead of starting the Application, dump configuration to stdout (as JSON)
    Default: False

BaseIPythonApplication(Application) options
-------------------------------------------
--BaseIPythonApplication.add_ipython_dir_to_sys_path=<Bool>
    Default: False
--BaseIPythonApplication.auto_create=<Bool>
    Whether to create profile dir if it doesn't exist
    Default: False
--BaseIPythonApplication.copy_config_files=<Bool>
    Whether to install the default config files into the profile dir.
            If a new profile is being created, and IPython contains config files for that
            profile, then they will be staged into the new directory.  Otherwise,
            default config files will be automatically generated.
    Default: False
--BaseIPythonApplication.extra_config_file=<Unicode>
    Path to an extra config file to load.
        If specified, load this config file in addition to any other IPython
    config.
    Default: ''
--BaseIPythonApplication.ipython_dir=<Unicode>
    The name of the IPython directory. This directory is used for logging
    configuration (through profiles), history storage, etc. The default is
    usually $HOME/.ipython. This option can also be specified through the
    environment variable IPYTHONDIR.
    Default: ''
--BaseIPythonApplication.log_datefmt=<Unicode>
    The date format used by logging formatters for %(asctime)s
    Default: '%Y-%m-%d %H:%M:%S'
--BaseIPythonApplication.log_format=<Unicode>
    The Logging format template
    Default: '[%(name)s]%(highlevel)s %(message)s'
--BaseIPythonApplication.log_level=<Enum>
    Set the log level by value or name.
    Choices: any of [0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL']
    Default: 30
--BaseIPythonApplication.overwrite=<Bool>
    Whether to overwrite existing config files when copying
    Default: False
--BaseIPythonApplication.profile=<Unicode>
    The IPython profile to use.
    Default: 'default'
--BaseIPythonApplication.show_config=<Bool>
    Instead of starting the Application, dump configuration to stdout
    Default: False
--BaseIPythonApplication.show_config_json=<Bool>
    Instead of starting the Application, dump configuration to stdout (as JSON)
    Default: False
--BaseIPythonApplication.verbose_crash=<Bool>
    Create a massive crash report when IPython encounters what may be an
            internal error.  The default is to append a short message to the
            usual traceback
    Default: False

TerminalIPythonApp(BaseIPythonApplication, InteractiveShellApp) options
-----------------------------------------------------------------------
--TerminalIPythonApp.add_ipython_dir_to_sys_path=<Bool>
    Default: False
--TerminalIPythonApp.code_to_run=<Unicode>
    Execute the given command string.
    Default: ''
--TerminalIPythonApp.copy_config_files=<Bool>
    Whether to install the default config files into the profile dir.
            If a new profile is being created, and IPython contains config files for that
            profile, then they will be staged into the new directory.  Otherwise,
            default config files will be automatically generated.
    Default: False
--TerminalIPythonApp.display_banner=<Bool>
    Whether to display a banner upon starting IPython.
    Default: True
--TerminalIPythonApp.exec_PYTHONSTARTUP=<Bool>
    Run the file referenced by the PYTHONSTARTUP environment
            variable at IPython startup.
    Default: True
--TerminalIPythonApp.exec_files=<list-item-1>...
    List of files to run at IPython startup.
    Default: []
--TerminalIPythonApp.exec_lines=<list-item-1>...
    lines of code to run at IPython startup.
    Default: []
--TerminalIPythonApp.extensions=<list-item-1>...
    A list of dotted module names of IPython extensions to load.
    Default: []
--TerminalIPythonApp.extra_config_file=<Unicode>
    Path to an extra config file to load.
        If specified, load this config file in addition to any other IPython
    config.
    Default: ''
--TerminalIPythonApp.extra_extensions=<list-item-1>...
    Dotted module name(s) of one or more IPython extensions to load.
    For specifying extra extensions to load on the command-line.
    .. versionadded:: 7.10
    Default: []
--TerminalIPythonApp.file_to_run=<Unicode>
    A file to be run
    Default: ''
--TerminalIPythonApp.force_interact=<Bool>
    If a command or file is given via the command-line,
            e.g. 'ipython foo.py', start an interactive shell after executing the
            file or command.
    Default: False
--TerminalIPythonApp.gui=<CaselessStrEnum>
    Enable GUI event loop integration with any of ('asyncio', 'glut', 'gtk',
    'gtk2', 'gtk3', 'gtk4', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'qt6', 'tk',
    'wx', 'gtk2', 'qt4').
    Choices: any of ['asyncio', 'glut', 'gtk', 'gtk2', 'gtk3', 'gtk4', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'qt6', 'tk', 'wx', 'gtk2', 'qt4'] (case-insensitive) or None
    Default: None
--TerminalIPythonApp.hide_initial_ns=<Bool>
    Should variables loaded at startup (by startup files, exec_lines, etc.)
            be hidden from tools like %who?
    Default: True
--TerminalIPythonApp.ignore_cwd=<Bool>
    If True, IPython will not add the current working directory to sys.path.
            When False, the current working directory is added to sys.path, allowing imports
            of modules defined in the current directory.
    Default: False
--TerminalIPythonApp.interactive_shell_class=<Type>
    Class to use to instantiate the TerminalInteractiveShell object. Useful for
    custom Frontends
    Default: 'IPython.terminal.interactiveshell.TerminalInteractiveShell'
--TerminalIPythonApp.ipython_dir=<Unicode>
    The name of the IPython directory. This directory is used for logging
    configuration (through profiles), history storage, etc. The default is
    usually $HOME/.ipython. This option can also be specified through the
    environment variable IPYTHONDIR.
    Default: ''
--TerminalIPythonApp.log_datefmt=<Unicode>
    The date format used by logging formatters for %(asctime)s
    Default: '%Y-%m-%d %H:%M:%S'
--TerminalIPythonApp.log_format=<Unicode>
    The Logging format template
    Default: '[%(name)s]%(highlevel)s %(message)s'
--TerminalIPythonApp.log_level=<Enum>
    Set the log level by value or name.
    Choices: any of [0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL']
    Default: 30
--TerminalIPythonApp.matplotlib=<CaselessStrEnum>
    Configure matplotlib for interactive use with
            the default matplotlib backend.
    Choices: any of ['auto', 'agg', 'gtk', 'gtk3', 'gtk4', 'inline', 'ipympl', 'nbagg', 'notebook', 'osx', 'pdf', 'ps', 'qt', 'qt4', 'qt5', 'qt6', 'svg', 'tk', 'widget', 'wx'] (case-insensitive) or None
    Default: None
--TerminalIPythonApp.module_to_run=<Unicode>
    Run the module as a script.
    Default: ''
--TerminalIPythonApp.overwrite=<Bool>
    Whether to overwrite existing config files when copying
    Default: False
--TerminalIPythonApp.profile=<Unicode>
    The IPython profile to use.
    Default: 'default'
--TerminalIPythonApp.pylab=<CaselessStrEnum>
    Pre-load matplotlib and numpy for interactive use,
            selecting a particular matplotlib backend and loop integration.
    Choices: any of ['auto', 'agg', 'gtk', 'gtk3', 'gtk4', 'inline', 'ipympl', 'nbagg', 'notebook', 'osx', 'pdf', 'ps', 'qt', 'qt4', 'qt5', 'qt6', 'svg', 'tk', 'widget', 'wx'] (case-insensitive) or None
    Default: None
--TerminalIPythonApp.pylab_import_all=<Bool>
    If true, IPython will populate the user namespace with numpy, pylab, etc.
            and an ``import *`` is done from numpy and pylab, when using pylab mode.
            When False, pylab mode should not import any names into the user
    namespace.
    Default: True
--TerminalIPythonApp.quick=<Bool>
    Start IPython quickly by skipping the loading of config files.
    Default: False
--TerminalIPythonApp.reraise_ipython_extension_failures=<Bool>
    Reraise exceptions encountered loading IPython extensions?
    Default: False
--TerminalIPythonApp.show_config=<Bool>
    Instead of starting the Application, dump configuration to stdout
    Default: False
--TerminalIPythonApp.show_config_json=<Bool>
    Instead of starting the Application, dump configuration to stdout (as JSON)
    Default: False
--TerminalIPythonApp.verbose_crash=<Bool>
    Create a massive crash report when IPython encounters what may be an
            internal error.  The default is to append a short message to the
            usual traceback
    Default: False

InteractiveShell(SingletonConfigurable) options
-----------------------------------------------
--InteractiveShell.ast_node_interactivity=<Enum>
    'all', 'last', 'last_expr' or 'none', 'last_expr_or_assign' specifying which
    nodes should be run interactively (displaying output from expressions).
    Choices: any of ['all', 'last', 'last_expr', 'none', 'last_expr_or_assign']
    Default: 'last_expr'
--InteractiveShell.ast_transformers=<list-item-1>...
    A list of ast.NodeTransformer subclass instances, which will be applied to
    user input before code is run.
    Default: []
--InteractiveShell.autoawait=<Bool>
    Automatically run await statement in the top level repl.
    Default: True
--InteractiveShell.autocall=<Enum>
    Make IPython automatically call any callable object even if you didn't type
    explicit parentheses. For example, 'str 43' becomes 'str(43)' automatically.
    The value can be '0' to disable the feature, '1' for 'smart' autocall, where
    it is not applied if there are no more arguments on the line, and '2' for
    'full' autocall, where all callable objects are automatically called (even
    if no arguments are present).
    Choices: any of [0, 1, 2]
    Default: 0
--InteractiveShell.autoindent=<Bool>
    Autoindent IPython code entered interactively.
    Default: True
--InteractiveShell.automagic=<Bool>
    Enable magic commands to be called without the leading %.
    Default: True
--InteractiveShell.banner1=<Unicode>
    The part of the banner to be printed before the profile
    Default: "Python 3.9.10 (main, Jan 15 2022, 11:48:04) \nType 'copyrigh...
--InteractiveShell.banner2=<Unicode>
    The part of the banner to be printed after the profile
    Default: ''
--InteractiveShell.cache_size=<Int>
    Set the size of the output cache.  The default is 1000, you can change it
    permanently in your config file.  Setting it to 0 completely disables the
    caching system, and the minimum value accepted is 3 (if you provide a value
    less than 3, it is reset to 0 and a warning is issued).  This limit is
    defined because otherwise you'll spend more time re-flushing a too small
    cache than working
    Default: 1000
--InteractiveShell.color_info=<Bool>
    Use colors for displaying information about objects. Because this
    information is passed through a pager (like 'less'), and some pagers get
    confused with color codes, this capability can be turned off.
    Default: True
--InteractiveShell.colors=<CaselessStrEnum>
    Set the color scheme (NoColor, Neutral, Linux, or LightBG).
    Choices: any of ['Neutral', 'NoColor', 'LightBG', 'Linux'] (case-insensitive)
    Default: 'Neutral'
--InteractiveShell.debug=<Bool>
    Default: False
--InteractiveShell.disable_failing_post_execute=<Bool>
    Don't call post-execute functions that have failed in the past.
    Default: False
--InteractiveShell.display_page=<Bool>
    If True, anything that would be passed to the pager
            will be displayed as regular output instead.
    Default: False
--InteractiveShell.enable_html_pager=<Bool>
    (Provisional API) enables html representation in mime bundles sent to
    pagers.
    Default: False
--InteractiveShell.history_length=<Int>
    Total length of command history
    Default: 10000
--InteractiveShell.history_load_length=<Int>
    The number of saved history entries to be loaded into the history buffer at
    startup.
    Default: 1000
--InteractiveShell.ipython_dir=<Unicode>
    Default: ''
--InteractiveShell.logappend=<Unicode>
    Start logging to the given file in append mode. Use `logfile` to specify a
    log file to **overwrite** logs to.
    Default: ''
--InteractiveShell.logfile=<Unicode>
    The name of the logfile to use.
    Default: ''
--InteractiveShell.logstart=<Bool>
    Start logging to the default log file in overwrite mode. Use `logappend` to
    specify a log file to **append** logs to.
    Default: False
--InteractiveShell.loop_runner=<Any>
    Select the loop runner that will be used to execute top-level asynchronous
    code
    Default: 'IPython.core.interactiveshell._asyncio_runner'
--InteractiveShell.object_info_string_level=<Enum>
    Choices: any of [0, 1, 2]
    Default: 0
--InteractiveShell.pdb=<Bool>
    Automatically call the pdb debugger after every exception.
    Default: False
--InteractiveShell.quiet=<Bool>
    Default: False
--InteractiveShell.separate_in=<SeparateUnicode>
    Default: '\n'
--InteractiveShell.separate_out=<SeparateUnicode>
    Default: ''
--InteractiveShell.separate_out2=<SeparateUnicode>
    Default: ''
--InteractiveShell.show_rewritten_input=<Bool>
    Show rewritten input, e.g. for autocall.
    Default: True
--InteractiveShell.sphinxify_docstring=<Bool>
    Enables rich html representation of docstrings. (This requires the docrepr
    module).
    Default: False
--InteractiveShell.wildcards_case_sensitive=<Bool>
    Default: True
--InteractiveShell.xmode=<CaselessStrEnum>
    Switch modes for the IPython exception handlers.
    Choices: any of ['Context', 'Plain', 'Verbose', 'Minimal'] (case-insensitive)
    Default: 'Context'

TerminalInteractiveShell(InteractiveShell) options
--------------------------------------------------
--TerminalInteractiveShell.ast_node_interactivity=<Enum>
    'all', 'last', 'last_expr' or 'none', 'last_expr_or_assign' specifying which
    nodes should be run interactively (displaying output from expressions).
    Choices: any of ['all', 'last', 'last_expr', 'none', 'last_expr_or_assign']
    Default: 'last_expr'
--TerminalInteractiveShell.ast_transformers=<list-item-1>...
    A list of ast.NodeTransformer subclass instances, which will be applied to
    user input before code is run.
    Default: []
--TerminalInteractiveShell.auto_match=<Bool>
    Automatically add/delete closing bracket or quote when opening bracket or
    quote is entered/deleted. Brackets: (), [], {} Quotes: '', ""
    Default: False
--TerminalInteractiveShell.autoawait=<Bool>
    Automatically run await statement in the top level repl.
    Default: True
--TerminalInteractiveShell.autocall=<Enum>
    Make IPython automatically call any callable object even if you didn't type
    explicit parentheses. For example, 'str 43' becomes 'str(43)' automatically.
    The value can be '0' to disable the feature, '1' for 'smart' autocall, where
    it is not applied if there are no more arguments on the line, and '2' for
    'full' autocall, where all callable objects are automatically called (even
    if no arguments are present).
    Choices: any of [0, 1, 2]
    Default: 0
--TerminalInteractiveShell.autoformatter=<Unicode>
    Autoformatter to reformat Terminal code. Can be `'black'` or `None`
    Default: 'black'
--TerminalInteractiveShell.autoindent=<Bool>
    Autoindent IPython code entered interactively.
    Default: True
--TerminalInteractiveShell.automagic=<Bool>
    Enable magic commands to be called without the leading %.
    Default: True
--TerminalInteractiveShell.banner1=<Unicode>
    The part of the banner to be printed before the profile
    Default: "Python 3.9.10 (main, Jan 15 2022, 11:48:04) \nType 'copyrigh...
--TerminalInteractiveShell.banner2=<Unicode>
    The part of the banner to be printed after the profile
    Default: ''
--TerminalInteractiveShell.cache_size=<Int>
    Set the size of the output cache.  The default is 1000, you can change it
    permanently in your config file.  Setting it to 0 completely disables the
    caching system, and the minimum value accepted is 3 (if you provide a value
    less than 3, it is reset to 0 and a warning is issued).  This limit is
    defined because otherwise you'll spend more time re-flushing a too small
    cache than working
    Default: 1000
--TerminalInteractiveShell.color_info=<Bool>
    Use colors for displaying information about objects. Because this
    information is passed through a pager (like 'less'), and some pagers get
    confused with color codes, this capability can be turned off.
    Default: True
--TerminalInteractiveShell.colors=<CaselessStrEnum>
    Set the color scheme (NoColor, Neutral, Linux, or LightBG).
    Choices: any of ['Neutral', 'NoColor', 'LightBG', 'Linux'] (case-insensitive)
    Default: 'Neutral'
--TerminalInteractiveShell.confirm_exit=<Bool>
    Set to confirm when you try to exit IPython with an EOF (Control-D in Unix,
    Control-Z/Enter in Windows). By typing 'exit' or 'quit', you can force a
    direct exit without any confirmation.
    Default: True
--TerminalInteractiveShell.debug=<Bool>
    Default: False
--TerminalInteractiveShell.debugger_history_file=<Unicode>
    File in which to store and read history
    Default: '~/.pdbhistory'
--TerminalInteractiveShell.disable_failing_post_execute=<Bool>
    Don't call post-execute functions that have failed in the past.
    Default: False
--TerminalInteractiveShell.display_completions=<Enum>
    Options for displaying tab completions, 'column', 'multicolumn', and
    'readlinelike'. These options are for `prompt_toolkit`, see `prompt_toolkit`
    documentation for more information.
    Choices: any of ['column', 'multicolumn', 'readlinelike']
    Default: 'multicolumn'
--TerminalInteractiveShell.display_page=<Bool>
    If True, anything that would be passed to the pager
            will be displayed as regular output instead.
    Default: False
--TerminalInteractiveShell.editing_mode=<Unicode>
    Shortcut style to use at the prompt. 'vi' or 'emacs'.
    Default: 'emacs'
--TerminalInteractiveShell.editor=<Unicode>
    Set the editor used by IPython (default to $EDITOR/vi/notepad).
    Default: 'vim'
--TerminalInteractiveShell.emacs_bindings_in_vi_insert_mode=<Bool>
    Add shortcuts from 'emacs' insert mode to 'vi' insert mode.
    Default: True
--TerminalInteractiveShell.enable_history_search=<Bool>
    Allows to enable/disable the prompt toolkit history search
    Default: True
--TerminalInteractiveShell.enable_html_pager=<Bool>
    (Provisional API) enables html representation in mime bundles sent to
    pagers.
    Default: False
--TerminalInteractiveShell.extra_open_editor_shortcuts=<Bool>
    Enable vi (v) or Emacs (C-X C-E) shortcuts to open an external editor. This
    is in addition to the F2 binding, which is always enabled.
    Default: False
--TerminalInteractiveShell.handle_return=<Any>
    Provide an alternative handler to be called when the user presses Return.
    This is an advanced option intended for debugging, which may be changed or
    removed in later releases.
    Default: None
--TerminalInteractiveShell.highlight_matching_brackets=<Bool>
    Highlight matching brackets.
    Default: True
--TerminalInteractiveShell.highlighting_style=<Union>
    The name or class of a Pygments style to use for syntax
            highlighting. To see available styles, run `pygmentize -L styles`.
    Default: traitlets.Undefined
--TerminalInteractiveShell.highlighting_style_overrides=<key-1>=<value-1>...
    Override highlighting format for specific tokens
    Default: {}
--TerminalInteractiveShell.history_length=<Int>
    Total length of command history
    Default: 10000
--TerminalInteractiveShell.history_load_length=<Int>
    The number of saved history entries to be loaded into the history buffer at
    startup.
    Default: 1000
--TerminalInteractiveShell.ipython_dir=<Unicode>
    Default: ''
--TerminalInteractiveShell.logappend=<Unicode>
    Start logging to the given file in append mode. Use `logfile` to specify a
    log file to **overwrite** logs to.
    Default: ''
--TerminalInteractiveShell.logfile=<Unicode>
    The name of the logfile to use.
    Default: ''
--TerminalInteractiveShell.logstart=<Bool>
    Start logging to the default log file in overwrite mode. Use `logappend` to
    specify a log file to **append** logs to.
    Default: False
--TerminalInteractiveShell.loop_runner=<Any>
    Select the loop runner that will be used to execute top-level asynchronous
    code
    Default: 'IPython.core.interactiveshell._asyncio_runner'
--TerminalInteractiveShell.mime_renderers=<key-1>=<value-1>...
    Default: {}
--TerminalInteractiveShell.modal_cursor=<Bool>
    Cursor shape changes depending on vi mode: beam in vi insert mode, block in
    nav mode, underscore in replace mode.
    Default: True
--TerminalInteractiveShell.mouse_support=<Bool>
    Enable mouse support in the prompt (Note: prevents selecting text with the
    mouse)
    Default: False
--TerminalInteractiveShell.object_info_string_level=<Enum>
    Choices: any of [0, 1, 2]
    Default: 0
--TerminalInteractiveShell.pdb=<Bool>
    Automatically call the pdb debugger after every exception.
    Default: False
--TerminalInteractiveShell.prompt_includes_vi_mode=<Bool>
    Display the current vi mode (when using vi editing mode).
    Default: True
--TerminalInteractiveShell.prompts_class=<Type>
    Class used to generate Prompt token for prompt_toolkit
    Default: 'IPython.terminal.prompts.Prompts'
--TerminalInteractiveShell.quiet=<Bool>
    Default: False
--TerminalInteractiveShell.separate_in=<SeparateUnicode>
    Default: '\n'
--TerminalInteractiveShell.separate_out=<SeparateUnicode>
    Default: ''
--TerminalInteractiveShell.separate_out2=<SeparateUnicode>
    Default: ''
--TerminalInteractiveShell.show_rewritten_input=<Bool>
    Show rewritten input, e.g. for autocall.
    Default: True
--TerminalInteractiveShell.simple_prompt=<Bool>
    Use `raw_input` for the REPL, without completion and prompt colors.
                Useful when controlling IPython as a subprocess, and piping STDIN/OUT/ERR. Known usage are:
                IPython own testing machinery, and emacs inferior-shell integration through elpy.
                This mode default to `True` if the `IPY_TEST_SIMPLE_PROMPT`
                environment variable is set, or the current terminal is not a tty.
    Default: True
--TerminalInteractiveShell.space_for_menu=<Int>
    Number of line at the bottom of the screen to reserve for the tab completion
    menu, search history, ...etc, the height of these menus will at most this
    value. Increase it is you prefer long and skinny menus, decrease for short
    and wide.
    Default: 6
--TerminalInteractiveShell.sphinxify_docstring=<Bool>
    Enables rich html representation of docstrings. (This requires the docrepr
    module).
    Default: False
--TerminalInteractiveShell.term_title=<Bool>
    Automatically set the terminal title
    Default: True
--TerminalInteractiveShell.term_title_format=<Unicode>
    Customize the terminal title format.  This is a python format string.
    Available substitutions are: {cwd}.
    Default: 'IPython: {cwd}'
--TerminalInteractiveShell.timeoutlen=<Float>
    The time in milliseconds that is waited for a mapped key
           sequence to complete.
    Default: 0.5
--TerminalInteractiveShell.true_color=<Bool>
    Use 24bit colors instead of 256 colors in prompt highlighting.
            If your terminal supports true color, the following command should
            print ``TRUECOLOR`` in orange::
                printf "\x1b[38;2;255;100;0mTRUECOLOR\x1b[0m\n"
    Default: False
--TerminalInteractiveShell.ttimeoutlen=<Float>
    The time in milliseconds that is waited for a key code
           to complete.
    Default: 0.01
--TerminalInteractiveShell.wildcards_case_sensitive=<Bool>
    Default: True
--TerminalInteractiveShell.xmode=<CaselessStrEnum>
    Switch modes for the IPython exception handlers.
    Choices: any of ['Context', 'Plain', 'Verbose', 'Minimal'] (case-insensitive)
    Default: 'Context'

HistoryAccessor(HistoryAccessorBase) options
--------------------------------------------
--HistoryAccessor.connection_options=<key-1>=<value-1>...
    Options for configuring the SQLite connection
            These options are passed as keyword args to sqlite3.connect
            when establishing database connections.
    Default: {}
--HistoryAccessor.enabled=<Bool>
    enable the SQLite history
            set enabled=False to disable the SQLite history,
            in which case there will be no stored history, no SQLite connection,
            and no background saving thread.  This may be necessary in some
            threaded environments where IPython is embedded.
    Default: True
--HistoryAccessor.hist_file=<Union>
    Path to file to use for SQLite history database.
            By default, IPython will put the history database in the IPython
            profile directory.  If you would rather share one history among
            profiles, you can set this value in each, so that they are consistent.
            Due to an issue with fcntl, SQLite is known to misbehave on some NFS
            mounts.  If you see IPython hanging, try setting this to something on a
            local disk, e.g::
                ipython --HistoryManager.hist_file=/tmp/ipython_hist.sqlite
            you can also use the specific value `:memory:` (including the colon
            at both end but not the back ticks), to avoid creating an history file.
    Default: traitlets.Undefined

HistoryManager(HistoryAccessor) options
---------------------------------------
--HistoryManager.connection_options=<key-1>=<value-1>...
    Options for configuring the SQLite connection
            These options are passed as keyword args to sqlite3.connect
            when establishing database connections.
    Default: {}
--HistoryManager.db_cache_size=<Int>
    Write to database every x commands (higher values save disk access & power).
    Values of 1 or less effectively disable caching.
    Default: 0
--HistoryManager.db_log_output=<Bool>
    Should the history database include output? (default: no)
    Default: False
--HistoryManager.enabled=<Bool>
    enable the SQLite history
            set enabled=False to disable the SQLite history,
            in which case there will be no stored history, no SQLite connection,
            and no background saving thread.  This may be necessary in some
            threaded environments where IPython is embedded.
    Default: True
--HistoryManager.hist_file=<Union>
    Path to file to use for SQLite history database.
            By default, IPython will put the history database in the IPython
            profile directory.  If you would rather share one history among
            profiles, you can set this value in each, so that they are consistent.
            Due to an issue with fcntl, SQLite is known to misbehave on some NFS
            mounts.  If you see IPython hanging, try setting this to something on a
            local disk, e.g::
                ipython --HistoryManager.hist_file=/tmp/ipython_hist.sqlite
            you can also use the specific value `:memory:` (including the colon
            at both end but not the back ticks), to avoid creating an history file.
    Default: traitlets.Undefined

ProfileDir(LoggingConfigurable) options
---------------------------------------
--ProfileDir.location=<Unicode>
    Set the profile location directly. This overrides the logic used by the
            `profile` option.
    Default: ''

BaseFormatter(Configurable) options
-----------------------------------
--BaseFormatter.deferred_printers=<key-1>=<value-1>...
    Default: {}
--BaseFormatter.enabled=<Bool>
    Default: True
--BaseFormatter.singleton_printers=<key-1>=<value-1>...
    Default: {}
--BaseFormatter.type_printers=<key-1>=<value-1>...
    Default: {}

PlainTextFormatter(BaseFormatter) options
-----------------------------------------
--PlainTextFormatter.deferred_printers=<key-1>=<value-1>...
    Default: {}
--PlainTextFormatter.float_precision=<CUnicode>
    Default: ''
--PlainTextFormatter.max_seq_length=<Int>
    Truncate large collections (lists, dicts, tuples, sets) to this size.
            Set to 0 to disable truncation.
    Default: 1000
--PlainTextFormatter.max_width=<Int>
    Default: 79
--PlainTextFormatter.newline=<Unicode>
    Default: '\n'
--PlainTextFormatter.pprint=<Bool>
    Default: True
--PlainTextFormatter.singleton_printers=<key-1>=<value-1>...
    Default: {}
--PlainTextFormatter.type_printers=<key-1>=<value-1>...
    Default: {}
--PlainTextFormatter.verbose=<Bool>
    Default: False

Completer(Configurable) options
-------------------------------
--Completer.backslash_combining_completions=<Bool>
    Enable unicode completions, e.g. \alpha<tab> . Includes completion of latex
    commands, unicode names, and expanding unicode characters back to latex
    commands.
    Default: True
--Completer.debug=<Bool>
    Enable debug for the Completer. Mostly print extra information for
    experimental jedi integration.
    Default: False
--Completer.greedy=<Bool>
    Activate greedy completion
            PENDING DEPRECATION. this is now mostly taken care of with Jedi.
            This will enable completion on elements of lists, results of function calls, etc.,
            but can be unsafe because the code is actually evaluated on TAB.
    Default: False
--Completer.jedi_compute_type_timeout=<Int>
    Experimental: restrict time (in milliseconds) during which Jedi can compute types.
            Set to 0 to stop computing types. Non-zero value lower than 100ms may hurt
            performance by preventing jedi to build its cache.
    Default: 400
--Completer.use_jedi=<Bool>
    Experimental: Use Jedi to generate autocompletions. Default to True if jedi
    is installed.
    Default: True

IPCompleter(Completer) options
------------------------------
--IPCompleter.backslash_combining_completions=<Bool>
    Enable unicode completions, e.g. \alpha<tab> . Includes completion of latex
    commands, unicode names, and expanding unicode characters back to latex
    commands.
    Default: True
--IPCompleter.debug=<Bool>
    Enable debug for the Completer. Mostly print extra information for
    experimental jedi integration.
    Default: False
--IPCompleter.greedy=<Bool>
    Activate greedy completion
            PENDING DEPRECATION. this is now mostly taken care of with Jedi.
            This will enable completion on elements of lists, results of function calls, etc.,
            but can be unsafe because the code is actually evaluated on TAB.
    Default: False
--IPCompleter.jedi_compute_type_timeout=<Int>
    Experimental: restrict time (in milliseconds) during which Jedi can compute types.
            Set to 0 to stop computing types. Non-zero value lower than 100ms may hurt
            performance by preventing jedi to build its cache.
    Default: 400
--IPCompleter.limit_to__all__=<Bool>
    DEPRECATED as of version 5.0.
    Instruct the completer to use __all__ for the completion
    Specifically, when completing on ``object.<tab>``.
    When True: only those names in obj.__all__ will be included.
    When False [default]: the __all__ attribute is ignored
    Default: False
--IPCompleter.merge_completions=<Bool>
    Whether to merge completion results into a single list
            If False, only the completion results from the first non-empty
            completer will be returned.
    Default: True
--IPCompleter.omit__names=<Enum>
    Instruct the completer to omit private method names
            Specifically, when completing on ``object.<tab>``.
            When 2 [default]: all names that start with '_' will be excluded.
            When 1: all 'magic' names (``__foo__``) will be excluded.
            When 0: nothing will be excluded.
    Choices: any of [0, 1, 2]
    Default: 2
--IPCompleter.profile_completions=<Bool>
    If True, emit profiling data for completion subsystem using cProfile.
    Default: False
--IPCompleter.profiler_output_dir=<Unicode>
    Template for path at which to output profile data for completions.
    Default: '.completion_profiles'
--IPCompleter.use_jedi=<Bool>
    Experimental: Use Jedi to generate autocompletions. Default to True if jedi
    is installed.
    Default: True

ScriptMagics(Magics) options
----------------------------
--ScriptMagics.script_magics=<list-item-1>...
    Extra script cell magics to define
            This generates simple wrappers of `%%script foo` as `%%foo`.
            If you want to add script magics that aren't on your path,
            specify them in script_paths
    Default: []
--ScriptMagics.script_paths=<key-1>=<value-1>...
    Dict mapping short 'ruby' names to full paths, such as
    '/opt/secret/bin/ruby'
            Only necessary for items in script_magics where the default path will not
            find the right interpreter.
    Default: {}

LoggingMagics(Magics) options
-----------------------------
--LoggingMagics.quiet=<Bool>
    Suppress output of log state when logging is enabled
    Default: False

StoreMagics(Magics) options
---------------------------
--StoreMagics.autorestore=<Bool>
    If True, any %store-d variables will be automatically restored
            when IPython starts.
    Default: False

Examples
--------

    ipython --matplotlib       # enable matplotlib integration
    ipython --matplotlib=qt    # enable matplotlib integration with qt4 backend

    ipython --log-level=DEBUG  # set logging to DEBUG
    ipython --profile=foo      # start with profile foo

    ipython profile create foo # create profile foo w/ default config files
    ipython help profile       # show the help for the profile subcmd

    ipython locate             # print the path to the IPython directory
    ipython locate profile foo # print the path to the directory for profile `foo`

